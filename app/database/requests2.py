import asyncio
from datetime import date
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError
import logging
from contextlib import asynccontextmanager
from typing import List, Dict, Any

from app.database.database import get_async_session
from app.database.models import User, UserProfile, Question, AnswerOption, Answer

logging.basicConfig(level=logging.INFO)

@asynccontextmanager
async def session_manager():
    async for session in get_async_session():
        yield session


async def get_user_by_telegram_id(tg_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id."""
    async with session_manager() as session:
        try:
            user = await session.scalar(select(User).where(User.telegram_id == tg_id))
            return user
            # if not user:
            #     session.add(User(telegram_id=tg_id))
            #     await session.commit()
            #     return True
            # return False
        except SQLAlchemyError as e:
            logging.error(f"Error setting user: {e}")
            await session.rollback()
            return None


async def add_user(tg_id) -> bool:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ (–∑–∞–Ω–æ—Å–∏–º –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º ID)
    :param tg_id:
    :return: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, False –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    async with session_manager() as session:
        try:
            session.add(User(telegram_id=tg_id))
            await session.commit()
            return True
        except SQLAlchemyError as e:
            logging.error(f"Error setting user: {e}")
            await session.rollback()
            return False


async def add_new_user_profile(
    tg_id: int,
    full_name: str = None,
    email: str = None,
    phone_number: str = None,
    city: str = None,
    status_in_germany: str = None,
) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    :param tg_id:
    :param full_name:
    :param email:
    :param phone_number:
    :param city:
    :param status_in_germany:
    :return: True –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    """
    async with session_manager() as session:
        try:
            user = await session.scalar(select(User).where(User.telegram_id == tg_id))
            if not user:
                user = User(telegram_id=tg_id)
                session.add(user)
                await session.commit()  # commit first to get the id
                user = await session.scalar(select(User).where(User.telegram_id == tg_id))  # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id

            user_profile = UserProfile(
                user_id=user.id,
                full_name=full_name,
                email=email,
                phone_number=phone_number,
                city=city,
                status_in_germany=status_in_germany,
            )
            session.add(user_profile)
            await session.commit()
            return True
        except SQLAlchemyError as e:
            logging.error(f"Error adding user profile: {e}")
            await session.rollback()
            return False


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î
async def load_questions():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    async with session_manager() as session:
            try:
                questions_result = await session.execute(select(Question))
                questions = questions_result.scalars().all()

                all_questions = []
                for question in questions:
                        options_result = await session.execute(
                            select(AnswerOption).where(AnswerOption.question_id == question.id)
                        )
                        options = options_result.scalars().all()
                        all_questions.append({
                            "question": question.question_text,
                            "options": [option.option_text for option in options],
                            "type": question.type,
                        })
                return all_questions
            except SQLAlchemyError as e:
                logging.error(f"Error load questions: {e}")
                await session.rollback()
                return []


async def add_questions_with_options(questions_data: List[Dict[str, Any]]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    async with session_manager() as session:
        try:
            for question_data in questions_data:
                question_text = question_data["question"]
                question_type = question_data.get("type", "single_choice")  # Default to single_choice if not provided

                question = Question(question_text=question_text, type=question_type)
                session.add(question)
                await session.flush()  # Flush to get id for the question

                for option_data in question_data["options"]:
                    option_text = option_data["text"]
                    score = option_data.get("score", 0)  # Default to 0 if not provided
                    option = AnswerOption(question_id=question.id, option_text=option_text, score=score)
                    session.add(option)

                await session.commit()
                logging.info(f"Question '{question_text}' and its options added successfully.")

        except SQLAlchemyError as e:
            logging.error(f"Error adding question and options: {e}")
            await session.rollback()


async def is_tables_empty() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç—ã –ª–∏ —Ç–∞–±–ª–∏—Ü—ã questions –∏ answer_options."""
    async with session_manager() as session:
        try:
            questions_result = await session.execute(select(Question))
            questions = questions_result.scalars().all()

            options_result = await session.execute(select(AnswerOption))
            options = options_result.scalars().all()

            return not bool(questions) and not bool(options)  # True if BOTH are empty
        except SQLAlchemyError as e:
            logging.error(f"Error checking if tables are empty: {e}")
            return True  # treat as empty to add questions in case of error


async def add_question_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
    if await is_tables_empty():
        questions_data = [
            {
                "question": "–í–∞—à–∏ —Ü–µ–ª–∏ –∏ –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –ª–µ—Ç?\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
                "type": "multiple_choice",
                "options": [
                    {"text": "–ü–æ–∫—É–ø–∫–∞ –∂–∏–ª—å—è"},
                    {"text": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∏–ª–∏—â–Ω—ã—Ö —Å—É–±—Å–∏–¥–∏–π"},
                    {"text": "–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π"},
                    {"text": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–ª–æ–≥–æ–≤"},
                    {"text": "–ü–µ–Ω—Å–∏–æ–Ω–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ"},
                    {"text": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞"},
                    {"text": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞"},
                    {"text": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥"},
                ],
            },
            {
                "question": "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
                "options": [
                    {"text": "–û—Ç 18 –¥–æ 35 –ª–µ—Ç"},
                    {"text": "–û—Ç 35 –¥–æ 45 –ª–µ—Ç"},
                    {"text": "–°—Ç–∞—Ä—à–µ 45 –ª–µ—Ç"},
                ],
            },
            {
                "question": "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ?",
                "options": [
                    {"text": "–•–æ–ª–æ—Å—Ç / –Ω–µ –∑–∞–º—É–∂–µ–º"},
                    {"text": "–ñ–µ–Ω–∞—Ç / –∑–∞–º—É–∂–µ–º"},
                    {"text": "–í–¥–æ–≤–µ—Ü / –≤–¥–æ–≤–∞"},
                ],
            },
            {
                "question": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –¥–æ 18 –ª–µ—Ç?",
                "options": [
                    {"text": "0", "score": 5},
                    {"text": "1", "score": 4},
                    {"text": "2", "score": 3},
                    {"text": "3 –∏ –±–æ–ª–µ–µ", "score": 2},
                ],
            },
            {
                "question": "–¢–µ–∫—É—â–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å?",
                "options": [
                    {"text": "–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä (unbefristet), –≥–æ—Å—Å–ª—É–∂–∞—â–∏–π (Beamter)"},
                    {"text": "–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞"},
                    {"text": "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä (befristet) –∏–ª–∏ MiniJob"},
                    {"text": "100% –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ (JC - B√ºrgergeld/Socialamt)"},
                ],
            },
            {
                "question": "–î–æ—Ö–æ–¥ –Ω–∞ —Å–µ–º—å—é –ø–æ—Å–ª–µ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤ (–Ω–µ—Ç—Ç–æ) –≤ –º–µ—Å—è—Ü?",
                "options": [
                    {"text": "–ú–µ–Ω–µ–µ 2 500 –µ–≤—Ä–æ"},
                    {"text": "–û—Ç 2 500 –¥–æ 3 499 –µ–≤—Ä–æ"},
                    {"text": "–û—Ç 3 500 –¥–æ 4 499 –µ–≤—Ä–æ"},
                    {"text": "–û—Ç 4 500 –µ–≤—Ä–æ –∏ –≤—ã—à–µ"},
                ],
            },
            {
                "question": "–•–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ñ–µ—Ä–µ!",
                "options": [
                    {"text": "–î–∞"},
                    {"text": "–ù–µ—Ç"},
                ],
            },
            {
                "question": "–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–∏–º —è–∑—ã–∫–æ–º?",
                "options": [
                    {"text": "A1‚ÄìA2 (–Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)"},
                    {"text": "B1 (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)"},
                    {"text": "B2 (—É–≤–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)"},
                    {"text": "C1 –∏ –≤—ã—à–µ (—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ)"},
                ],
            },
            {
                "question": "–û–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∂–∏–ª—å–µ–º? (–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞)",
                "type": "multiple_choice",
                "options": [
                    {"text": "–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è (—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞)"},
                    {"text": "–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞)"},
                    {"text": "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ —Å –∏–ø–æ—Ç–µ–∫–æ–π"},
                    {"text": "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ"},
                    {"text": "–ò–Ω–æ–µ (–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ —É —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤)"},
                ],
            },
            {
                "question": "–ù–∞–ª–∏—á–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤? (–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞)",
                "type": "multiple_choice",
                "options": [
                    {"text": "Riester Rente / Basis Rente / R√ºrup-Rente"},
                    {"text": "Zukunftsplan f√ºr Kinder (–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞ –±—É–¥—É—â–µ–µ –¥–µ—Ç–µ–π)"},
                    {"text": "Bausparvertrag"},
                    {"text": "Zusatzversicherung Zahn (–î–æ–ø. —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)"},
                    {"text": "Berufsunf√§higkeitsversicherung (–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)"},
                    {"text": "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É—é –≤ —Ñ–æ–Ω–¥—ã"},
                    {"text": "–ü–æ–∫–∞ –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è"},
                ],
            },
        ]
        await add_questions_with_options(questions_data)
    else:
        logging.info("Questions and options are already in the table. Skipping adding.")


async def main():
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    registration_data = {
        "tg_id": 123456789,
        "full_name": "John Doe",
        "email": "john.doe@example.com",
        "phone_number": "+1234567890",
        "city": "Berlin",
        "status_in_germany": "Verheiratet",  # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞
    }
    try:
        success = await add_new_user_profile(**registration_data)
        if success:
            print("User profile added successfully.")
        else:
            print("Failed to add user profile.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {e}")

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    registration_data = {
        "tg_id": 987654321,
    }
    try:
        success = await add_new_user_profile(**registration_data)
        if success:
            print("User profile added successfully.")
        else:
            print("Failed to add user profile.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {e}")


if __name__ == "__main__":
    asyncio.run(main())
