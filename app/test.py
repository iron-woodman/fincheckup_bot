import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7541180377:AAHcSumNNnfYmp4FQKRFA8wf3hcRF5UOfhY"

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
OPTIONS = {
    'a': "–ü–æ–∫—É–ø–∫–∞ –∂–∏–ª—å—è",
    'b': "–ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∏–ª–∏—â–Ω—ã—Ö —Å—É–±—Å–∏–¥–∏–π",
    'c': "–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π",
    'd': "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–ª–æ–≥–æ–≤",
    'e': "–ü–µ–Ω—Å–∏–æ–Ω–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ",
    'f': "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞",
    'g': "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞",
    'h': "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥",
}


# –°–æ—Å—Ç–æ—è–Ω–∏–µ
class UserState(StatesGroup):
    waiting_for_options = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

logging.basicConfig(level=logging.INFO)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(selected_options):
    keyboard = []
    for key, value in OPTIONS.items():
        text = f"{'‚úÖ ' if key in selected_options else ''}{value}"
        keyboard.append([InlineKeyboardButton(text=text, callback_data=f"option_{key}")])
    keyboard.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done")])  # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_options)
    await state.update_data(selected_options=set())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    await message.answer(
        "1. –í–∞—à–∏ —Ü–µ–ª–∏ –∏ –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –ª–µ—Ç?\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=create_keyboard(set()),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(UserState.waiting_for_options)
async def button(query: CallbackQuery, state: FSMContext):
    await query.answer()

    data = await state.get_data()
    selected_options = data.get("selected_options", set())

    if query.data.startswith("option_"):
        key = query.data.split("_")[1]
        if key in selected_options:
            selected_options.remove(key)  # –£–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        else:
            selected_options.add(key)  # –î–æ–±–∞–≤–∏—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    elif query.data == "done":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        if not selected_options:
            await query.message.edit_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.")
            return
        selected_options_names = [OPTIONS[key] for key in selected_options]
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: \n{',\n '.join(selected_options_names)}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()
        return

    await state.update_data(selected_options=selected_options)
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await query.message.edit_reply_markup(reply_markup=create_keyboard(selected_options))


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
